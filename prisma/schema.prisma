datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Type {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  breeds Breed[]
}

model Breed {
  id       Int       @id @default(autoincrement())
  name     String
  type     Type      @relation(fields: [typeId], references: [id])
  typeId   Int
  profiles Profile[]
}

model Disposition {
  id          Int                  @id @default(autoincrement())
  description String
  profiles    ProfileDisposition[]
}

model Availability {
  id          Int       @id @default(autoincrement())
  description String
  profiles    Profile[]
}

model News {
  id        Int      @id @default(autoincrement())
  news      String   @db.Text
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  mimeType  String
  contents  Bytes
  Profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

model Profile {
  id             Int                  @id @default(autoincrement())
  name           String               @db.Text
  dob            DateTime
  description    String               @db.Text
  breed          Breed                @relation(fields: [breedId], references: [id])
  breedId        Int
  availability   Availability         @relation(fields: [availabilityId], references: [id])
  availabilityId Int
  dispositions   ProfileDisposition[]
  images         Image[]
  favorites      Favorite[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model ProfileDisposition {
  id            Int         @id @default(autoincrement())
  profile       Profile     @relation(fields: [profileId], references: [id])
  profileId     Int
  disposition   Disposition @relation(fields: [dispositionId], references: [id])
  dispositionId Int
}

model Favorite {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  @@unique([userId, profileId])
}

// NextAuth

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String
  image         String?
  admin         Boolean    @default(false)
  favorites     Favorite[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
